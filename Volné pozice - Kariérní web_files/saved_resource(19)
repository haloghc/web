"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat-parser@3.6.4/dist/types", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        Object.defineProperty(exports, "__esModule", { value: true });
        var TYPE;
        (function (TYPE) {
            /**
             * Raw text
             */
            TYPE[TYPE["literal"] = 0] = "literal";
            /**
             * Variable w/o any format, e.g `var` in `this is a {var}`
             */
            TYPE[TYPE["argument"] = 1] = "argument";
            /**
             * Variable w/ number format
             */
            TYPE[TYPE["number"] = 2] = "number";
            /**
             * Variable w/ date format
             */
            TYPE[TYPE["date"] = 3] = "date";
            /**
             * Variable w/ time format
             */
            TYPE[TYPE["time"] = 4] = "time";
            /**
             * Variable w/ select format
             */
            TYPE[TYPE["select"] = 5] = "select";
            /**
             * Variable w/ plural format
             */
            TYPE[TYPE["plural"] = 6] = "plural";
            /**
             * Only possible within plural argument.
             * This is the `#` symbol that will be substituted with the count.
             */
            TYPE[TYPE["pound"] = 7] = "pound";
        })(TYPE = exports.TYPE || (exports.TYPE = {}));
        /**
         * Type Guards
         */
        function isLiteralElement(el) {
            return el.type === TYPE.literal;
        }
        exports.isLiteralElement = isLiteralElement;
        function isArgumentElement(el) {
            return el.type === TYPE.argument;
        }
        exports.isArgumentElement = isArgumentElement;
        function isNumberElement(el) {
            return el.type === TYPE.number;
        }
        exports.isNumberElement = isNumberElement;
        function isDateElement(el) {
            return el.type === TYPE.date;
        }
        exports.isDateElement = isDateElement;
        function isTimeElement(el) {
            return el.type === TYPE.time;
        }
        exports.isTimeElement = isTimeElement;
        function isSelectElement(el) {
            return el.type === TYPE.select;
        }
        exports.isSelectElement = isSelectElement;
        function isPluralElement(el) {
            return el.type === TYPE.plural;
        }
        exports.isPluralElement = isPluralElement;
        function isPoundElement(el) {
            return el.type === TYPE.pound;
        }
        exports.isPoundElement = isPoundElement;
        function isNumberSkeleton(el) {
            return !!(el && typeof el === 'object' && el.type === 0 /* number */);
        }
        exports.isNumberSkeleton = isNumberSkeleton;
        function isDateTimeSkeleton(el) {
            return !!(el && typeof el === 'object' && el.type === 1 /* dateTime */);
        }
        exports.isDateTimeSkeleton = isDateTimeSkeleton;
        function createLiteralElement(value) {
            return {
                type: TYPE.literal,
                value: value
            };
        }
        exports.createLiteralElement = createLiteralElement;
        function createNumberElement(value, style) {
            return {
                type: TYPE.number,
                value: value,
                style: style
            };
        }
        exports.createNumberElement = createNumberElement;
    }
});

"use strict";
// tslint:disable:only-arrow-functions
// tslint:disable:object-literal-shorthand
// tslint:disable:trailing-comma
// tslint:disable:object-literal-sort-keys
// tslint:disable:one-variable-per-declaration
// tslint:disable:max-line-length
// tslint:disable:no-consecutive-blank-lines
// tslint:disable:align

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat-parser@3.6.4/dist/parser", ['module', 'exports', 'require', './types'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __extends = this && this.__extends || function () {
            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                    d.__proto__ = b;
                } || function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return extendStatics(d, b);
            };
            return function (d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        // Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )
        //
        // https://pegjs.org/   https://github.com/metadevpro/ts-pegjs
        var types_1 = require("./types");
        var SyntaxError = /** @class */function (_super) {
            __extends(SyntaxError, _super);
            function SyntaxError(message, expected, found, location) {
                var _this = _super.call(this) || this;
                _this.message = message;
                _this.expected = expected;
                _this.found = found;
                _this.location = location;
                _this.name = "SyntaxError";
                if (typeof Error.captureStackTrace === "function") {
                    Error.captureStackTrace(_this, SyntaxError);
                }
                return _this;
            }
            SyntaxError.buildMessage = function (expected, found) {
                function hex(ch) {
                    return ch.charCodeAt(0).toString(16).toUpperCase();
                }
                function literalEscape(s) {
                    return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (ch) {
                        return "\\x0" + hex(ch);
                    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                        return "\\x" + hex(ch);
                    });
                }
                function classEscape(s) {
                    return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (ch) {
                        return "\\x0" + hex(ch);
                    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                        return "\\x" + hex(ch);
                    });
                }
                function describeExpectation(expectation) {
                    switch (expectation.type) {
                        case "literal":
                            return "\"" + literalEscape(expectation.text) + "\"";
                        case "class":
                            var escapedParts = expectation.parts.map(function (part) {
                                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
                            });
                            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                        case "any":
                            return "any character";
                        case "end":
                            return "end of input";
                        case "other":
                            return expectation.description;
                    }
                }

                return "Expected " + function describeExpected(expected1) {
                    var descriptions = expected1.map(describeExpectation);
                    var i;
                    var j;
                    descriptions.sort();
                    if (descriptions.length > 0) {
                        for (i = 1, j = 1; i < descriptions.length; i++) {
                            if (descriptions[i - 1] !== descriptions[i]) {
                                descriptions[j] = descriptions[i];
                                j++;
                            }
                        }
                        descriptions.length = j;
                    }
                    switch (descriptions.length) {
                        case 1:
                            return descriptions[0];
                        case 2:
                            return descriptions[0] + " or " + descriptions[1];
                        default:
                            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
                    }
                }(expected) + " but " + function describeFound(found1) {
                    return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
                }(found) + " found.";
            };
            return SyntaxError;
        }(Error);
        exports.SyntaxError = SyntaxError;
        function peg$parse(input, options) {
            options = options !== undefined ? options : {};
            var peg$FAILED = {};
            var peg$startRuleFunctions = { start: peg$parsestart };
            var peg$startRuleFunction = peg$parsestart;
            var peg$c0 = function (parts) {
                return parts.join('');
            };
            var peg$c1 = function (messageText) {
                return __assign({ type: types_1.TYPE.literal, value: messageText }, insertLocation());
            };

            var peg$c3 = peg$literalExpectation("#", false);
            var peg$c4 = function () {
                return __assign({ type: types_1.TYPE.pound }, insertLocation());
            };
            var peg$c5 = peg$otherExpectation("argumentElement");
            var peg$c6 = "{";
            var peg$c7 = peg$literalExpectation("{", false);
            var peg$c8 = "}";
            var peg$c9 = peg$literalExpectation("}", false);
            var peg$c10 = function (value) {
                return __assign({ type: types_1.TYPE.argument, value: value }, insertLocation());
            };
            var peg$c11 = peg$otherExpectation("numberSkeletonId");
            var peg$c12 = /^['\/{}]/;
            var peg$c13 = peg$classExpectation(["'", "/", "{", "}"], false, false);
            var peg$c14 = function peg$anyExpectation() {
                return { type: "any" };
            }();
            var peg$c15 = peg$otherExpectation("numberSkeletonTokenOption");

            var peg$c17 = peg$literalExpectation("/", false);
            var peg$c18 = function (option) {
                return option;
            };
            var peg$c19 = peg$otherExpectation("numberSkeletonToken");
            var peg$c20 = function (stem, options) {
                return { stem: stem, options: options };
            };
            var peg$c21 = function (tokens) {
                return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());
            };
            var peg$c22 = "::";
            var peg$c23 = peg$literalExpectation("::", false);
            var peg$c24 = function (skeleton) {
                return skeleton;
            };
            var peg$c25 = function () {
                messageCtx.push('numberArgStyle');return true;
            };
            var peg$c26 = function (style) {
                messageCtx.pop();
                return style.replace(/\s*$/, '');
            };
            var peg$c27 = ",";
            var peg$c28 = peg$literalExpectation(",", false);
            var peg$c29 = "number";
            var peg$c30 = peg$literalExpectation("number", false);
            var peg$c31 = function (value, type, style) {
                return __assign({ type: type === 'number' ? types_1.TYPE.number : type === 'date' ? types_1.TYPE.date : types_1.TYPE.time, style: style && style[2], value: value }, insertLocation());
            };
            var peg$c32 = "'";
            var peg$c33 = peg$literalExpectation("'", false);
            var peg$c34 = /^[^']/;
            var peg$c35 = peg$classExpectation(["'"], true, false);
            var peg$c36 = /^[^a-zA-Z'{}]/;
            var peg$c37 = peg$classExpectation([["a", "z"], ["A", "Z"], "'", "{", "}"], true, false);
            var peg$c38 = /^[a-zA-Z]/;
            var peg$c39 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
            var peg$c40 = function (pattern) {
                return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());
            };
            var peg$c41 = function () {
                messageCtx.push('dateOrTimeArgStyle');return true;
            };
            var peg$c42 = "date";
            var peg$c43 = peg$literalExpectation("date", false);
            var peg$c44 = "time";
            var peg$c45 = peg$literalExpectation("time", false);
            var peg$c46 = "plural";
            var peg$c47 = peg$literalExpectation("plural", false);
            var peg$c48 = "selectordinal";
            var peg$c49 = peg$literalExpectation("selectordinal", false);
            var peg$c50 = "offset:";
            var peg$c51 = peg$literalExpectation("offset:", false);
            var peg$c52 = function (value, pluralType, offset, options) {
                return __assign({ type: types_1.TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {
                        var id = _a.id,
                            value = _a.value,
                            optionLocation = _a.location;
                        if (id in all) {
                            error("Duplicate option \"" + id + "\" in plural element: \"" + text() + "\"", location());
                        }
                        all[id] = {
                            value: value,
                            location: optionLocation
                        };
                        return all;
                    }, {}) }, insertLocation());
            };
            var peg$c53 = "select";
            var peg$c54 = peg$literalExpectation("select", false);
            var peg$c55 = function (value, options) {
                return __assign({ type: types_1.TYPE.select, value: value, options: options.reduce(function (all, _a) {
                        var id = _a.id,
                            value = _a.value,
                            optionLocation = _a.location;
                        if (id in all) {
                            error("Duplicate option \"" + id + "\" in select element: \"" + text() + "\"", location());
                        }
                        all[id] = {
                            value: value,
                            location: optionLocation
                        };
                        return all;
                    }, {}) }, insertLocation());
            };

            var peg$c57 = peg$literalExpectation("=", false);
            var peg$c58 = function (id) {
                messageCtx.push('select');return true;
            };
            var peg$c59 = function (id, value) {
                messageCtx.pop();
                return __assign({ id: id,
                    value: value }, insertLocation());
            };
            var peg$c60 = function (id) {
                messageCtx.push('plural');return true;
            };
            var peg$c61 = function (id, value) {
                messageCtx.pop();
                return __assign({ id: id,
                    value: value }, insertLocation());
            };
            var peg$c62 = peg$otherExpectation("whitespace");
            var peg$c63 = /^[\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
            var peg$c64 = peg$classExpectation([["\t", "\r"], " ", "\x85", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u2028", "\u2029", "\u202F", "\u205F", "\u3000"], false, false);
            var peg$c65 = peg$otherExpectation("syntax pattern");
            var peg$c66 = /^[!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/;
            var peg$c67 = peg$classExpectation([["!", "/"], [":", "@"], ["[", "^"], "`", ["{", "~"], ["\xA1", "\xA7"], "\xA9", "\xAB", "\xAC", "\xAE", "\xB0", "\xB1", "\xB6", "\xBB", "\xBF", "\xD7", "\xF7", ["\u2010", "\u2027"], ["\u2030", "\u203E"], ["\u2041", "\u2053"], ["\u2055", "\u205E"], ["\u2190", "\u245F"], ["\u2500", "\u2775"], ["\u2794", "\u2BFF"], ["\u2E00", "\u2E7F"], ["\u3001", "\u3003"], ["\u3008", "\u3020"], "\u3030", "\uFD3E", "\uFD3F", "\uFE45", "\uFE46"], false, false);
            var peg$c68 = peg$otherExpectation("optional whitespace");
            var peg$c69 = peg$otherExpectation("number");

            var peg$c71 = peg$literalExpectation("-", false);
            var peg$c72 = function (negative, num) {
                return num ? negative ? -num : num : 0;
            };
            var peg$c73 = peg$otherExpectation("apostrophe");
            var peg$c74 = peg$otherExpectation("double apostrophes");
            var peg$c75 = "''";
            var peg$c76 = peg$literalExpectation("''", false);
            var peg$c77 = function () {
                return "'";
            };
            var peg$c78 = function (escapedChar, quotedChars) {
                return escapedChar + quotedChars.replace("''", "'");
            };
            var peg$c79 = function (x) {
                return x !== '{' && !(isInPluralOption() && x === '#') && !(isNestedMessageText() && x === '}');
            };

            var peg$c81 = peg$literalExpectation("\n", false);
            var peg$c82 = function (x) {
                return x === '{' || x === '}' || isInPluralOption() && x === '#';
            };
            var peg$c83 = peg$otherExpectation("argNameOrNumber");
            var peg$c84 = peg$otherExpectation("argNumber");

            var peg$c86 = peg$literalExpectation("0", false);
            var peg$c87 = function () {
                return 0;
            };
            var peg$c88 = /^[1-9]/;
            var peg$c89 = peg$classExpectation([["1", "9"]], false, false);
            var peg$c90 = /^[0-9]/;
            var peg$c91 = peg$classExpectation([["0", "9"]], false, false);
            var peg$c92 = function (digits) {
                return parseInt(digits.join(''), 10);
            };
            var peg$c93 = peg$otherExpectation("argName");
            var peg$currPos = 0;
            var peg$savedPos = 0;
            var peg$posDetailsCache = [{ line: 1, column: 1 }];
            var peg$maxFailPos = 0;
            var peg$maxFailExpected = [];
            var peg$silentFails = 0;
            var peg$result;
            if (options.startRule !== undefined) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }
                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }
            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }
            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function error(message, location1) {
                location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);
                throw peg$buildSimpleError(message, location1);
            }
            function peg$literalExpectation(text1, ignoreCase) {
                return { type: "literal", text: text1, ignoreCase: ignoreCase };
            }
            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }

            function peg$endExpectation() {
                return { type: "end" };
            }
            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }
            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos];
                var p;
                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }
                    details = peg$posDetailsCache[p];
                    details = {
                        line: details.line,
                        column: details.column
                    };
                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        } else {
                            details.column++;
                        }
                        p++;
                    }
                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }
            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos);
                var endPosDetails = peg$computePosDetails(endPos);
                return {
                    start: {
                        offset: startPos,
                        line: startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line: endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }
            function peg$fail(expected1) {
                if (peg$currPos < peg$maxFailPos) {
                    return;
                }
                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }
                peg$maxFailExpected.push(expected1);
            }
            function peg$buildSimpleError(message, location1) {
                return new SyntaxError(message, [], "", location1);
            }
            function peg$buildStructuredError(expected1, found, location1) {
                return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
            }
            function peg$parsestart() {
                var s0 = peg$parsemessage();

                return s0;
            }
            function peg$parsemessage() {
                var s0, s1;
                s0 = [];
                s1 = peg$parsemessageElement();
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$parsemessageElement();
                }
                return s0;
            }
            function peg$parsemessageElement() {
                var s0 = peg$parseliteralElement();

                if (s0 === peg$FAILED) {
                    s0 = peg$parseargumentElement();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsesimpleFormatElement();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsepluralElement();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseselectElement();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parsepoundElement();
                                }
                            }
                        }
                    }
                }
                return s0;
            }
            function peg$parsemessageText() {
                var s0, s1, s2;
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsedoubleApostrophes();
                if (s2 === peg$FAILED) {
                    s2 = peg$parsequotedString();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseunquotedString();
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsedoubleApostrophes();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parsequotedString();
                            if (s2 === peg$FAILED) {
                                s2 = peg$parseunquotedString();
                            }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c0(s1);
                }
                s0 = s1;
                return s0;
            }
            function peg$parseliteralElement() {
                var s0, s1;
                s0 = peg$currPos;
                s1 = peg$parsemessageText();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c1(s1);
                }
                s0 = s1;
                return s0;
            }
            function peg$parsepoundElement() {
                var s0, s1;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 35) {
                    s1 = "#";
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4();
                }
                s0 = s1;
                return s0;
            }
            function peg$parseargumentElement() {
                var s0, s1, s2, s3, s4, s5;
                peg$silentFails++;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargNameOrNumber();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s5 = peg$c8;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c9);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c10(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c5);
                    }
                }
                return s0;
            }
            function peg$parsenumberSkeletonId() {
                var s0, s1, s2, s3, s4;
                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parsewhiteSpace();
                if (s4 === peg$FAILED) {
                    if (peg$c12.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                        }
                    }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                    s3 = undefined;
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c14);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$currPos;
                        s3 = peg$currPos;
                        peg$silentFails++;
                        s4 = peg$parsewhiteSpace();
                        if (s4 === peg$FAILED) {
                            if (peg$c12.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c13);
                                }
                            }
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                            s3 = undefined;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c14);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c11);
                    }
                }
                return s0;
            }
            function peg$parsenumberSkeletonTokenOption() {
                var s0, s1, s2;
                peg$silentFails++;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 47) {
                    s1 = "/";
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c17);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumberSkeletonId();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c18(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c15);
                    }
                }
                return s0;
            }
            function peg$parsenumberSkeletonToken() {
                var s0, s1, s2, s3, s4;
                peg$silentFails++;
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumberSkeletonId();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsenumberSkeletonTokenOption();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsenumberSkeletonTokenOption();
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c20(s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c19);
                    }
                }
                return s0;
            }
            function peg$parsenumberSkeleton() {
                var s0, s1, s2;
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsenumberSkeletonToken();
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsenumberSkeletonToken();
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c21(s1);
                }
                s0 = s1;
                return s0;
            }
            function peg$parsenumberArgStyle() {
                var s0, s1, s2;
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c22) {
                    s1 = peg$c22;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c23);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumberSkeleton();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c24(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s1 = peg$c25();
                    if (s1) {
                        s1 = undefined;
                    } else {
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsemessageText();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c26(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                return s0;
            }
            function peg$parsenumberFormatElement() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargNameOrNumber();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s5 = peg$c27;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c28);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c29) {
                                            s7 = peg$c29;
                                            peg$currPos += 6;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c30);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$currPos;
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s10 = peg$c27;
                                                    peg$currPos++;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c28);
                                                    }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parse_();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parsenumberArgStyle();
                                                        if (s12 !== peg$FAILED) {
                                                            s10 = [s10, s11, s12];
                                                            s9 = s10;
                                                        } else {
                                                            peg$currPos = s9;
                                                            s9 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s9;
                                                        s9 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                                if (s9 === peg$FAILED) {
                                                    s9 = null;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                            s11 = peg$c8;
                                                            peg$currPos++;
                                                        } else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c9);
                                                            }
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c31(s3, s7, s9);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parsedateTimeSkeletonLiteral() {
                var s0, s1, s2, s3;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c32;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c33);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsedoubleApostrophes();
                    if (s3 === peg$FAILED) {
                        if (peg$c34.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c35);
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$parsedoubleApostrophes();
                            if (s3 === peg$FAILED) {
                                if (peg$c34.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c35);
                                    }
                                }
                            }
                        }
                    } else {
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s3 = peg$c32;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c33);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = [];
                    s1 = peg$parsedoubleApostrophes();
                    if (s1 === peg$FAILED) {
                        if (peg$c36.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c37);
                            }
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        while (s1 !== peg$FAILED) {
                            s0.push(s1);
                            s1 = peg$parsedoubleApostrophes();
                            if (s1 === peg$FAILED) {
                                if (peg$c36.test(input.charAt(peg$currPos))) {
                                    s1 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c37);
                                    }
                                }
                            }
                        }
                    } else {
                        s0 = peg$FAILED;
                    }
                }
                return s0;
            }
            function peg$parsedateTimeSkeletonPattern() {
                var s0, s1;
                s0 = [];
                if (peg$c38.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c39);
                    }
                }
                if (s1 !== peg$FAILED) {
                    while (s1 !== peg$FAILED) {
                        s0.push(s1);
                        if (peg$c38.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c39);
                            }
                        }
                    }
                } else {
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parsedateTimeSkeleton() {
                var s0, s1, s2, s3;
                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = [];
                s3 = peg$parsedateTimeSkeletonLiteral();
                if (s3 === peg$FAILED) {
                    s3 = peg$parsedateTimeSkeletonPattern();
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsedateTimeSkeletonLiteral();
                        if (s3 === peg$FAILED) {
                            s3 = peg$parsedateTimeSkeletonPattern();
                        }
                    }
                } else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    s1 = input.substring(s1, peg$currPos);
                } else {
                    s1 = s2;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c40(s1);
                }
                s0 = s1;
                return s0;
            }
            function peg$parsedateOrTimeArgStyle() {
                var s0, s1, s2;
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c22) {
                    s1 = peg$c22;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c23);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsedateTimeSkeleton();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c24(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s1 = peg$c41();
                    if (s1) {
                        s1 = undefined;
                    } else {
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsemessageText();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c26(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                return s0;
            }
            function peg$parsedateOrTimeFormatElement() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargNameOrNumber();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s5 = peg$c27;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c28);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 4) === peg$c42) {
                                            s7 = peg$c42;
                                            peg$currPos += 4;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c43);
                                            }
                                        }
                                        if (s7 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 4) === peg$c44) {
                                                s7 = peg$c44;
                                                peg$currPos += 4;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c45);
                                                }
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$currPos;
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s10 = peg$c27;
                                                    peg$currPos++;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c28);
                                                    }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parse_();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parsedateOrTimeArgStyle();
                                                        if (s12 !== peg$FAILED) {
                                                            s10 = [s10, s11, s12];
                                                            s9 = s10;
                                                        } else {
                                                            peg$currPos = s9;
                                                            s9 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s9;
                                                        s9 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                                if (s9 === peg$FAILED) {
                                                    s9 = null;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                            s11 = peg$c8;
                                                            peg$currPos++;
                                                        } else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c9);
                                                            }
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c31(s3, s7, s9);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parsesimpleFormatElement() {
                var s0 = peg$parsenumberFormatElement();

                if (s0 === peg$FAILED) {
                    s0 = peg$parsedateOrTimeFormatElement();
                }
                return s0;
            }
            function peg$parsepluralElement() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargNameOrNumber();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s5 = peg$c27;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c28);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c46) {
                                            s7 = peg$c46;
                                            peg$currPos += 6;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c47);
                                            }
                                        }
                                        if (s7 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 13) === peg$c48) {
                                                s7 = peg$c48;
                                                peg$currPos += 13;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c49);
                                                }
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s9 = peg$c27;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c28);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$currPos;
                                                        if (input.substr(peg$currPos, 7) === peg$c50) {
                                                            s12 = peg$c50;
                                                            peg$currPos += 7;
                                                        } else {
                                                            s12 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c51);
                                                            }
                                                        }
                                                        if (s12 !== peg$FAILED) {
                                                            s13 = peg$parse_();
                                                            if (s13 !== peg$FAILED) {
                                                                s14 = peg$parsenumber();
                                                                if (s14 !== peg$FAILED) {
                                                                    s12 = [s12, s13, s14];
                                                                    s11 = s12;
                                                                } else {
                                                                    peg$currPos = s11;
                                                                    s11 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s11;
                                                                s11 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s11;
                                                            s11 = peg$FAILED;
                                                        }
                                                        if (s11 === peg$FAILED) {
                                                            s11 = null;
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parse_();
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = [];
                                                                s14 = peg$parsepluralOption();
                                                                if (s14 !== peg$FAILED) {
                                                                    while (s14 !== peg$FAILED) {
                                                                        s13.push(s14);
                                                                        s14 = peg$parsepluralOption();
                                                                    }
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    s14 = peg$parse_();
                                                                    if (s14 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                                            s15 = peg$c8;
                                                                            peg$currPos++;
                                                                        } else {
                                                                            s15 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                                peg$fail(peg$c9);
                                                                            }
                                                                        }
                                                                        if (s15 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$c52(s3, s7, s11, s13);
                                                                            s0 = s1;
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parseselectElement() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargNameOrNumber();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s5 = peg$c27;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c28);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c53) {
                                            s7 = peg$c53;
                                            peg$currPos += 6;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c54);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s9 = peg$c27;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c28);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = [];
                                                        s12 = peg$parseselectOption();
                                                        if (s12 !== peg$FAILED) {
                                                            while (s12 !== peg$FAILED) {
                                                                s11.push(s12);
                                                                s12 = peg$parseselectOption();
                                                            }
                                                        } else {
                                                            s11 = peg$FAILED;
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parse_();
                                                            if (s12 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                                    s13 = peg$c8;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c9);
                                                                    }
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c55(s3, s11);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parsepluralRuleSelectValue() {
                var s0, s1, s2, s3;
                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                    s2 = "=";
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c57);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsenumber();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseargName();
                }
                return s0;
            }
            function peg$parseselectOption() {
                var s0, s1, s2, s3, s4, s5, s6, s7;
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseargName();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 123) {
                                s4 = peg$c6;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c7);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = peg$currPos;
                                s5 = peg$c58(s2);
                                if (s5) {
                                    s5 = undefined;
                                } else {
                                    s5 = peg$FAILED;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsemessage();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s7 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c9);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c59(s2, s6);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parsepluralOption() {
                var s0, s1, s2, s3, s4, s5, s6, s7;
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsepluralRuleSelectValue();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 123) {
                                s4 = peg$c6;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c7);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = peg$currPos;
                                s5 = peg$c60(s2);
                                if (s5) {
                                    s5 = undefined;
                                } else {
                                    s5 = peg$FAILED;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsemessage();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s7 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c9);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c61(s2, s6);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parsewhiteSpace() {
                var s0;
                peg$silentFails++;
                if (peg$c63.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c64);
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c62);
                    }
                }
                return s0;
            }
            function peg$parsepatternSyntax() {
                var s0;
                peg$silentFails++;
                if (peg$c66.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c67);
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c65);
                    }
                }
                return s0;
            }
            function peg$parse_() {
                var s0, s1, s2;
                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsewhiteSpace();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsewhiteSpace();
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c68);
                    }
                }
                return s0;
            }
            function peg$parsenumber() {
                var s0, s1, s2;
                peg$silentFails++;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = "-";
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c71);
                    }
                }
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseargNumber();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c72(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c69);
                    }
                }
                return s0;
            }

            function peg$parsedoubleApostrophes() {
                var s0, s1;
                peg$silentFails++;
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c75) {
                    s1 = peg$c75;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c76);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c77();
                }
                s0 = s1;
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c74);
                    }
                }
                return s0;
            }
            function peg$parsequotedString() {
                var s0, s1, s2, s3, s4, s5;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c32;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c33);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseescapedChar();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = [];
                        if (input.substr(peg$currPos, 2) === peg$c75) {
                            s5 = peg$c75;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c76);
                            }
                        }
                        if (s5 === peg$FAILED) {
                            if (peg$c34.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c35);
                                }
                            }
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            if (input.substr(peg$currPos, 2) === peg$c75) {
                                s5 = peg$c75;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c76);
                                }
                            }
                            if (s5 === peg$FAILED) {
                                if (peg$c34.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c35);
                                    }
                                }
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s3 = input.substring(s3, peg$currPos);
                        } else {
                            s3 = s4;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                                s4 = peg$c32;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c33);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c78(s2, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                return s0;
            }
            function peg$parseunquotedString() {
                var s0, s1, s2, s3;
                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.length > peg$currPos) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c14);
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s3 = peg$c79(s2);
                    if (s3) {
                        s3 = undefined;
                    } else {
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 10) {
                        s1 = "\n";
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c81);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                return s0;
            }
            function peg$parseescapedChar() {
                var s0, s1, s2, s3;
                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.length > peg$currPos) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c14);
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s3 = peg$c82(s2);
                    if (s3) {
                        s3 = undefined;
                    } else {
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                return s0;
            }
            function peg$parseargNameOrNumber() {
                var s0, s1;
                peg$silentFails++;
                s0 = peg$currPos;
                s1 = peg$parseargNumber();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseargName();
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c83);
                    }
                }
                return s0;
            }
            function peg$parseargNumber() {
                var s0, s1, s2, s3, s4;
                peg$silentFails++;
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 48) {
                    s1 = "0";
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c86);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c87();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    if (peg$c88.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c89);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        if (peg$c90.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c91);
                            }
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            if (peg$c90.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c91);
                                }
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c92(s1);
                    }
                    s0 = s1;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c84);
                    }
                }
                return s0;
            }
            function peg$parseargName() {
                var s0, s1, s2, s3, s4;
                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parsewhiteSpace();
                if (s4 === peg$FAILED) {
                    s4 = peg$parsepatternSyntax();
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                    s3 = undefined;
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c14);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$currPos;
                        s3 = peg$currPos;
                        peg$silentFails++;
                        s4 = peg$parsewhiteSpace();
                        if (s4 === peg$FAILED) {
                            s4 = peg$parsepatternSyntax();
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                            s3 = undefined;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c14);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                } else {
                    s0 = s1;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c93);
                    }
                }
                return s0;
            }
            var messageCtx = ['root'];
            function isNestedMessageText() {
                return messageCtx.length > 1;
            }
            function isInPluralOption() {
                return messageCtx[messageCtx.length - 1] === 'plural';
            }
            function insertLocation() {
                return options && options.captureLocation ? {
                    location: location()
                } : {};
            }
            peg$result = peg$startRuleFunction();
            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }
                throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
            }
        }
        exports.pegParse = peg$parse;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat-parser@3.6.4/dist/normalize", ['module', 'exports', 'require', './types', './parser'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __spreadArrays = this && this.__spreadArrays || function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
            return r;
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        var types_1 = require("./types");
        var parser_1 = require("./parser");
        var PLURAL_HASHTAG_REGEX = /(^|[^\\])#/g;
        /**
         * Whether to convert `#` in plural rule options
         * to `{var, number}`
         * @param el AST Element
         * @param pluralStack current plural stack
         */
        function normalizeHashtagInPlural(els) {
            els.forEach(function (el) {
                // If we're encountering a plural el
                if (!types_1.isPluralElement(el) && !types_1.isSelectElement(el)) {
                    return;
                }
                // Go down the options and search for # in any literal element
                Object.keys(el.options).forEach(function (id) {
                    var _a;
                    var opt = el.options[id];
                    // If we got a match, we have to split this
                    // and inject a NumberElement in the middle
                    var matchingLiteralElIndex = -1;
                    var literalEl = undefined;
                    for (var i = 0; i < opt.value.length; i++) {
                        var el_1 = opt.value[i];
                        if (types_1.isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {
                            matchingLiteralElIndex = i;
                            literalEl = el_1;
                            break;
                        }
                    }
                    if (literalEl) {
                        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, "$1{" + el.value + ", number}");
                        var newEls = parser_1.pegParse(newValue);
                        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));
                    }
                    normalizeHashtagInPlural(opt.value);
                });
            });
        }
        exports.normalizeHashtagInPlural = normalizeHashtagInPlural;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat-parser@3.6.4/dist/skeleton", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        /**
         * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
         * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
         * with some tweaks
         */
        var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
        /**
         * Parse Date time skeleton into Intl.DateTimeFormatOptions
         * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
         * @public
         * @param skeleton skeleton string
         */
        function parseDateTimeSkeleton(skeleton) {
            var result = {};
            skeleton.replace(DATE_TIME_REGEX, function (match) {
                var len = match.length;
                switch (match[0]) {
                    // Era
                    case 'G':
                        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                        break;
                    // Year
                    case 'y':
                        result.year = len === 2 ? '2-digit' : 'numeric';
                        break;
                    case 'Y':
                    case 'u':
                    case 'U':
                    case 'r':
                        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
                    // Quarter
                    case 'q':
                    case 'Q':
                        throw new RangeError('`q/Q` (quarter) patterns are not supported');
                    // Month
                    case 'M':
                    case 'L':
                        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                        break;
                    // Week
                    case 'w':
                    case 'W':
                        throw new RangeError('`w/W` (week) patterns are not supported');
                    case 'd':
                        result.day = ['numeric', '2-digit'][len - 1];
                        break;
                    case 'D':
                    case 'F':
                    case 'g':
                        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
                    // Weekday
                    case 'E':
                        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                        break;
                    case 'e':
                        if (len < 4) {
                            throw new RangeError('`e..eee` (weekday) patterns are not supported');
                        }
                        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                        break;
                    case 'c':
                        if (len < 4) {
                            throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                        }
                        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                        break;
                    // Period
                    case 'a':
                        // AM, PM
                        result.hour12 = true;
                        break;
                    case 'b': // am, pm, noon, midnight
                    case 'B':
                        // flexible day periods
                        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
                    // Hour
                    case 'h':
                        result.hourCycle = 'h12';
                        result.hour = ['numeric', '2-digit'][len - 1];
                        break;
                    case 'H':
                        result.hourCycle = 'h23';
                        result.hour = ['numeric', '2-digit'][len - 1];
                        break;
                    case 'K':
                        result.hourCycle = 'h11';
                        result.hour = ['numeric', '2-digit'][len - 1];
                        break;
                    case 'k':
                        result.hourCycle = 'h24';
                        result.hour = ['numeric', '2-digit'][len - 1];
                        break;
                    case 'j':
                    case 'J':
                    case 'C':
                        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
                    // Minute
                    case 'm':
                        result.minute = ['numeric', '2-digit'][len - 1];
                        break;
                    // Second
                    case 's':
                        result.second = ['numeric', '2-digit'][len - 1];
                        break;
                    case 'S':
                    case 'A':
                        throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');
                    // Zone
                    case 'z':
                        // 1..3, 4: specific non-location format
                        result.timeZoneName = len < 4 ? 'short' : 'long';
                        break;
                    case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
                    case 'O': // 1, 4: miliseconds in day short, long
                    case 'v': // 1, 4: generic non-location format
                    case 'V': // 1, 2, 3, 4: time zone ID or city
                    case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
                    case 'x':
                        // 1, 2, 3, 4: The ISO8601 varios formats
                        throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');
                }
                return '';
            });
            return result;
        }
        exports.parseDateTimeSkeleton = parseDateTimeSkeleton;
        function icuUnitToEcma(unit) {
            return unit.replace(/^(.*?)-/, '');
        }
        var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\+|#+)?)?$/g;
        var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?$/g;
        function parseSignificantPrecision(str) {
            var result = {};
            str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
                // @@@ case
                if (typeof g2 !== 'string') {
                    result.minimumSignificantDigits = g1.length;
                    result.maximumSignificantDigits = g1.length;
                }
                // @@@+ case
                else if (g2 === '+') {
                        result.minimumSignificantDigits = g1.length;
                    }
                    // .### case
                    else if (g1[0] === '#') {
                            result.maximumSignificantDigits = g1.length;
                        }
                        // .@@## or .@@@ case
                        else {
                                result.minimumSignificantDigits = g1.length;
                                result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
                            }
                return '';
            });
            return result;
        }
        function parseSign(str) {
            switch (str) {
                case 'sign-auto':
                    return {
                        signDisplay: 'auto'
                    };
                case 'sign-accounting':
                    return {
                        currencySign: 'accounting'
                    };
                case 'sign-always':
                    return {
                        signDisplay: 'always'
                    };
                case 'sign-accounting-always':
                    return {
                        signDisplay: 'always',
                        currencySign: 'accounting'
                    };
                case 'sign-except-zero':
                    return {
                        signDisplay: 'exceptZero'
                    };
                case 'sign-accounting-except-zero':
                    return {
                        signDisplay: 'exceptZero',
                        currencySign: 'accounting'
                    };
                case 'sign-never':
                    return {
                        signDisplay: 'never'
                    };
            }
        }
        function parseNotationOptions(opt) {
            var signOpts = parseSign(opt);
            if (signOpts) {
                return signOpts;
            }
            return {};
        }
        /**
         * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
         */
        function convertNumberSkeletonToNumberFormatOptions(tokens) {
            var result = {};
            for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
                var token = tokens_1[_i];
                switch (token.stem) {
                    case 'percent':
                        result.style = 'percent';
                        continue;
                    case 'currency':
                        result.style = 'currency';
                        result.currency = token.options[0];
                        continue;
                    case 'group-off':
                        result.useGrouping = false;
                        continue;
                    case 'precision-integer':
                        result.maximumFractionDigits = 0;
                        continue;
                    case 'measure-unit':
                        result.style = 'unit';
                        result.unit = icuUnitToEcma(token.options[0]);
                        continue;
                    case 'compact-short':
                        result.notation = 'compact';
                        result.compactDisplay = 'short';
                        continue;
                    case 'compact-long':
                        result.notation = 'compact';
                        result.compactDisplay = 'long';
                        continue;
                    case 'scientific':
                        result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) {
                            return __assign(__assign({}, all), parseNotationOptions(opt));
                        }, {}));
                        continue;
                    case 'engineering':
                        result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) {
                            return __assign(__assign({}, all), parseNotationOptions(opt));
                        }, {}));
                        continue;
                    case 'notation-simple':
                        result.notation = 'standard';
                        continue;
                    // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
                    case 'unit-width-narrow':
                        result.currencyDisplay = 'narrowSymbol';
                        result.unitDisplay = 'narrow';
                        continue;
                    case 'unit-width-short':
                        result.currencyDisplay = 'code';
                        result.unitDisplay = 'short';
                        continue;
                    case 'unit-width-full-name':
                        result.currencyDisplay = 'name';
                        result.unitDisplay = 'long';
                        continue;
                    case 'unit-width-iso-code':
                        result.currencyDisplay = 'symbol';
                        continue;
                }
                // Precision
                // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision
                if (FRACTION_PRECISION_REGEX.test(token.stem)) {
                    if (token.options.length > 1) {
                        throw new RangeError('Fraction-precision stems only accept a single optional option');
                    }
                    token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2) {
                        // precision-integer case
                        if (match === '.') {
                            result.maximumFractionDigits = 0;
                        }
                        // .000+ case
                        else if (g2 === '+') {
                                result.minimumFractionDigits = g2.length;
                            }
                            // .### case
                            else if (g1[0] === '#') {
                                    result.maximumFractionDigits = g1.length;
                                }
                                // .00## or .000 case
                                else {
                                        result.minimumFractionDigits = g1.length;
                                        result.maximumFractionDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
                                    }
                        return '';
                    });
                    if (token.options.length) {
                        result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));
                    }
                    continue;
                }
                if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
                    result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
                    continue;
                }
                var signOpts = parseSign(token.stem);
                if (signOpts) {
                    result = __assign(__assign({}, result), signOpts);
                }
            }
            return result;
        }
        exports.convertNumberSkeletonToNumberFormatOptions = convertNumberSkeletonToNumberFormatOptions;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat-parser@3.6.4/dist/index", ['module', 'exports', 'require', './parser', './normalize', './types', './skeleton'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
        Object.defineProperty(exports, "__esModule", { value: true });
        var parser_1 = require("./parser");
        var normalize_1 = require("./normalize");
        __export(require("./types"));
        __export(require("./parser"));
        __export(require("./skeleton"));
        function parse(input, opts) {
            var els = parser_1.pegParse(input, opts);
            if (!opts || opts.normalizeHashtagInPlural !== false) {
                normalize_1.normalizeHashtagInPlural(els);
            }
            return els;
        }
        exports.parse = parse;
    }
});

"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-format-cache@4.3.1/index", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __spreadArrays = this && this.__spreadArrays || function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
            return r;
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        // -- Utilities ----------------------------------------------------------------
        function getCacheId(inputs) {
            return JSON.stringify(inputs.map(function (input) {
                return input && typeof input === 'object' ? orderedProps(input) : input;
            }));
        }
        function orderedProps(obj) {
            return Object.keys(obj).sort().map(function (k) {
                var _a;
                return _a = {}, _a[k] = obj[k], _a;
            });
        }
        var memoizeFormatConstructor = function (FormatConstructor, cache) {
            if (cache === void 0) {
                cache = {};
            }
            return function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var cacheId = getCacheId(args);
                var format = cacheId && cache[cacheId];
                if (!format) {
                    format = new ((_a = FormatConstructor).bind.apply(_a, __spreadArrays([void 0], args)))();
                    if (cacheId) {
                        cache[cacheId] = format;
                    }
                }
                return format;
            };
        };
        exports.default = memoizeFormatConstructor;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat@6.1.11/dist/formatters", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$intl-messageformat-parser'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __extends = this && this.__extends || function () {
            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                    d.__proto__ = b;
                } || function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
                return extendStatics(d, b);
            };
            return function (d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", { value: true });
        var intl_messageformat_parser_1 = require("career-ui-job-advertisement-public-overview$intl-messageformat-parser");
        var ESCAPE_HASH_REGEX = /\\#/g;
        var FormatError = /** @class */function (_super) {
            __extends(FormatError, _super);
            function FormatError(msg, variableId) {
                var _this = _super.call(this, msg) || this;
                _this.variableId = variableId;
                return _this;
            }
            return FormatError;
        }(Error);
        function mergeLiteral(parts) {
            if (parts.length < 2) {
                return parts;
            }
            return parts.reduce(function (all, part) {
                var lastPart = all[all.length - 1];
                if (!lastPart || lastPart.type !== 0 /* literal */ || part.type !== 0 /* literal */) {
                        all.push(part);
                    } else {
                    lastPart.value += part.value;
                }
                return all;
            }, []);
        }
        // TODO(skeleton): add skeleton support
        function formatToParts(els, locales, formatters, formats, values,
        // For debugging
        originalMessage) {
            // Hot path for straight simple msg translations
            if (els.length === 1 && intl_messageformat_parser_1.isLiteralElement(els[0])) {
                return [{
                    type: 0 /* literal */
                    , value: els[0].value.replace(ESCAPE_HASH_REGEX, '#')
                }];
            }
            var result = [];
            for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
                var el = els_1[_i];
                // Exit early for string parts.
                if (intl_messageformat_parser_1.isLiteralElement(el)) {
                    result.push({
                        type: 0 /* literal */
                        , value: el.value.replace(ESCAPE_HASH_REGEX, '#')
                    });
                    continue;
                }
                var varName = el.value;
                // Enforce that all required values are provided by the caller.
                if (!(values && varName in values)) {
                    throw new FormatError("The intl string context variable \"" + varName + "\" was not provided to the string \"" + originalMessage + "\"");
                }
                var value = values[varName];
                if (intl_messageformat_parser_1.isArgumentElement(el)) {
                    if (!value || typeof value === 'string' || typeof value === 'number') {
                        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';
                    }
                    result.push({
                        type: 1 /* argument */
                        , value: value
                    });
                    continue;
                }
                // Recursively format plural and select parts' option — which can be a
                // nested pattern structure. The choosing of the option to use is
                // abstracted-by and delegated-to the part helper object.
                if (intl_messageformat_parser_1.isDateElement(el)) {
                    var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;
                    result.push({
                        type: 0 /* literal */
                        , value: formatters.getDateTimeFormat(locales, style).format(value)
                    });
                    continue;
                }
                if (intl_messageformat_parser_1.isTimeElement(el)) {
                    var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;
                    result.push({
                        type: 0 /* literal */
                        , value: formatters.getDateTimeFormat(locales, style).format(value)
                    });
                    continue;
                }
                if (intl_messageformat_parser_1.isNumberElement(el)) {
                    var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;
                    result.push({
                        type: 0 /* literal */
                        , value: formatters.getNumberFormat(locales, style).format(value)
                    });
                    continue;
                }
                if (intl_messageformat_parser_1.isSelectElement(el)) {
                    var opt = el.options[value] || el.options.other;
                    if (!opt) {
                        throw new RangeError("Invalid values for \"" + el.value + "\": \"" + value + "\". Options are \"" + Object.keys(el.options).join('", "') + "\"");
                    }
                    result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
                    continue;
                }
                if (intl_messageformat_parser_1.isPluralElement(el)) {
                    var opt = el.options["=" + value];
                    if (!opt) {
                        var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
                        opt = el.options[rule] || el.options.other;
                    }
                    if (!opt) {
                        throw new RangeError("Invalid values for \"" + el.value + "\": \"" + value + "\". Options are \"" + Object.keys(el.options).join('", "') + "\"");
                    }
                    result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
                    continue;
                }
            }
            return mergeLiteral(result);
        }
        exports.formatToParts = formatToParts;
        function formatToString(els, locales, formatters, formats, values,
        // For debugging
        originalMessage) {
            var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);
            // Hot path for straight simple msg translations
            if (parts.length === 1) {
                return parts[0].value;
            }
            return parts.reduce(function (all, part) {
                return all += part.value;
            }, '');
        }
        exports.formatToString = formatToString;
        // Singleton
        var domParser;
        var TOKEN_DELIMITER = '@@';
        var TOKEN_REGEX = /@@(.*?)@@/g;
        var counter = 0;
        function generateId() {
            return Date.now() + "_" + ++counter;
        }
        function restoreRichPlaceholderMessage(text, objectParts) {
            return text.split(TOKEN_REGEX).filter(Boolean).map(function (c) {
                return objectParts[c] != null ? objectParts[c] : c;
            }).reduce(function (all, c) {
                if (!all.length) {
                    all.push(c);
                } else if (typeof c === 'string' && typeof all[all.length - 1] === 'string') {
                    all[all.length - 1] += c;
                } else {
                    all.push(c);
                }
                return all;
            }, []);
        }
        /**
         * Not exhaustive, just for sanity check
         */
        var SIMPLE_XML_REGEX = /(<[^<\s]*?>(.*?)<\/[^<\s]*?>)|(<[^<\s\/]*?\/>)/;
        function formatXMLMessage(els, locales, formatters, formats, values,
        // For debugging
        originalMessage) {
            var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);
            var objectParts = {};
            var formattedMessage = parts.reduce(function (all, part) {
                if (part.type === 0 /* literal */) {
                        return all += part.value;
                    }
                var id = generateId();
                objectParts[id] = part.value;
                return all += "" + TOKEN_DELIMITER + id + TOKEN_DELIMITER;
            }, '');
            // Not designed to filter out aggressively
            if (!SIMPLE_XML_REGEX.test(formattedMessage)) {
                return restoreRichPlaceholderMessage(formattedMessage, objectParts);
            }
            if (!values) {
                throw new FormatError('Message has placeholders but no values was given');
            }
            if (typeof DOMParser === 'undefined') {
                throw new FormatError('Cannot format XML message without DOMParser');
            }
            if (!domParser) {
                domParser = new DOMParser();
            }
            // XML, not HTML since HTMl is strict about self-closing tag
            var dom = domParser.parseFromString("<template>" + formattedMessage + "</template>", 'application/xml');
            if (dom.getElementsByTagName('parsererror').length) {
                throw new FormatError("Malformed XML message " + dom.getElementsByTagName('parsererror')[0].innerHTML);
            }
            var content = dom.firstChild;
            if (!content) {
                throw new FormatError("Malformed XML message " + formattedMessage);
            }
            var tagsToFormat = Object.keys(values).filter(function (varName) {
                return !!dom.getElementsByTagName(varName).length;
            });
            // No tags to format
            if (!tagsToFormat.length) {
                return restoreRichPlaceholderMessage(formattedMessage, objectParts);
            }
            var childNodes = Array.prototype.slice.call(content.childNodes);
            return childNodes.reduce(function (reconstructedChunks, _a) {
                var tagName = _a.tagName,
                    outerHTML = _a.outerHTML,
                    textContent = _a.textContent;
                // Regular text
                if (!tagName) {
                    var chunks = restoreRichPlaceholderMessage(textContent || '', objectParts);
                    return reconstructedChunks.concat(chunks);
                }
                // Legacy HTML
                if (!values[tagName]) {
                    var chunks = restoreRichPlaceholderMessage(outerHTML, objectParts);
                    if (chunks.length === 1) {
                        return reconstructedChunks.concat([chunks[0]]);
                    }
                    return reconstructedChunks.concat(chunks);
                }
                // XML Tag replacement
                var formatFnOrValue = values[tagName];
                if (typeof formatFnOrValue === 'function') {
                    if (textContent == null) {
                        return reconstructedChunks.concat([formatFnOrValue(textContent || undefined)]);
                    }
                    var chunks = restoreRichPlaceholderMessage(textContent, objectParts);
                    return reconstructedChunks.concat([formatFnOrValue.apply(void 0, chunks)]);
                }
                return reconstructedChunks.concat([formatFnOrValue]);
            }, []);
        }
        exports.formatXMLMessage = formatXMLMessage;
    }
});

"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat@6.1.11/dist/core", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$intl-messageformat-parser', 'career-ui-job-advertisement-public-overview$intl-format-cache', './formatters'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        var intl_messageformat_parser_1 = require("career-ui-job-advertisement-public-overview$intl-messageformat-parser");
        var intl_format_cache_1 = require("career-ui-job-advertisement-public-overview$intl-format-cache");
        var formatters_1 = require("./formatters");
        // -- MessageFormat --------------------------------------------------------
        function resolveLocale(locales) {
            if (typeof locales === 'string') {
                locales = [locales];
            }
            try {
                return Intl.NumberFormat.supportedLocalesOf(locales, {
                    // IE11 localeMatcher `lookup` seems to convert `en` -> `en-US`
                    // but not other browsers,
                    localeMatcher: 'best fit'
                })[0];
            } catch (e) {
                return IntlMessageFormat.defaultLocale;
            }
        }
        // TODO(skeleton): add skeleton support
        function prewarmFormatters(els, locales, formatters, formats) {
            els.filter(function (el) {
                return !intl_messageformat_parser_1.isArgumentElement(el) && !intl_messageformat_parser_1.isLiteralElement(el);
            }).forEach(function (el) {
                // Recursively format plural and select parts' option — which can be a
                // nested pattern structure. The choosing of the option to use is
                // abstracted-by and delegated-to the part helper object.
                if (intl_messageformat_parser_1.isDateElement(el)) {
                    var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;
                    formatters.getDateTimeFormat(locales, style);
                }
                if (intl_messageformat_parser_1.isTimeElement(el)) {
                    var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;
                    formatters.getDateTimeFormat(locales, style);
                }
                if (intl_messageformat_parser_1.isNumberElement(el)) {
                    var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;
                    formatters.getNumberFormat(locales, style);
                }
                if (intl_messageformat_parser_1.isSelectElement(el)) {
                    Object.keys(el.options).forEach(function (id) {
                        return prewarmFormatters(el.options[id].value, locales, formatters, formats);
                    });
                }
                if (intl_messageformat_parser_1.isPluralElement(el)) {
                    formatters.getPluralRules(locales, { type: el.pluralType });
                    Object.keys(el.options).forEach(function (id) {
                        return prewarmFormatters(el.options[id].value, locales, formatters, formats);
                    });
                }
            });
        }
        function mergeConfig(c1, c2) {
            if (!c2) {
                return c1;
            }
            return __assign({}, c1 || {}, c2 || {}, Object.keys(c1).reduce(function (all, k) {
                all[k] = __assign({}, c1[k], c2[k] || {});
                return all;
            }, {}));
        }
        function mergeConfigs(defaultConfig, configs) {
            if (!configs) {
                return defaultConfig;
            }
            return Object.keys(defaultConfig).reduce(function (all, k) {
                all[k] = mergeConfig(defaultConfig[k], configs[k]);
                return all;
            }, __assign({}, defaultConfig));
        }
        function createDefaultFormatters(cache) {
            if (cache === void 0) {
                cache = {
                    number: {},
                    dateTime: {},
                    pluralRules: {}
                };
            }
            return {
                getNumberFormat: intl_format_cache_1.default(Intl.NumberFormat, cache.number),
                getDateTimeFormat: intl_format_cache_1.default(Intl.DateTimeFormat, cache.dateTime),
                getPluralRules: intl_format_cache_1.default(Intl.PluralRules, cache.pluralRules)
            };
        }
        exports.createDefaultFormatters = createDefaultFormatters;
        var IntlMessageFormat = /** @class */function () {
            function IntlMessageFormat(message, locales, overrideFormats, opts) {
                var _this = this;
                if (locales === void 0) {
                    locales = IntlMessageFormat.defaultLocale;
                }
                this.formatterCache = {
                    number: {},
                    dateTime: {},
                    pluralRules: {}
                };
                this.format = function (values) {
                    return formatters_1.formatToString(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);
                };
                this.formatToParts = function (values) {
                    return formatters_1.formatToParts(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);
                };
                this.formatXMLMessage = function (values) {
                    return formatters_1.formatXMLMessage(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);
                };
                this.resolvedOptions = function () {
                    return { locale: _this.locale };
                };
                this.getAst = function () {
                    return _this.ast;
                };
                if (typeof message === 'string') {
                    this.message = message;
                    if (!IntlMessageFormat.__parse) {
                        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
                    }
                    // Parse string messages into an AST.
                    this.ast = IntlMessageFormat.__parse(message);
                } else {
                    this.ast = message;
                }
                if (!Array.isArray(this.ast)) {
                    throw new TypeError('A message must be provided as a String or AST.');
                }
                // Creates a new object with the specified `formats` merged with the default
                // formats.
                this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
                // Defined first because it's used to build the format pattern.
                this.locale = resolveLocale(locales || []);
                this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
                prewarmFormatters(this.ast, this.locale, this.formatters, this.formats);
            }
            IntlMessageFormat.defaultLocale = 'en';
            IntlMessageFormat.__parse = intl_messageformat_parser_1.parse;
            // Default format options used as the prototype of the `formats` provided to the
            // constructor. These are used when constructing the internal Intl.NumberFormat
            // and Intl.DateTimeFormat instances.
            IntlMessageFormat.formats = {
                number: {
                    currency: {
                        style: 'currency'
                    },
                    percent: {
                        style: 'percent'
                    }
                },
                date: {
                    short: {
                        month: 'numeric',
                        day: 'numeric',
                        year: '2-digit'
                    },
                    medium: {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                    },
                    long: {
                        month: 'long',
                        day: 'numeric',
                        year: 'numeric'
                    },
                    full: {
                        weekday: 'long',
                        month: 'long',
                        day: 'numeric',
                        year: 'numeric'
                    }
                },
                time: {
                    short: {
                        hour: 'numeric',
                        minute: 'numeric'
                    },
                    medium: {
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric'
                    },
                    long: {
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric',
                        timeZoneName: 'short'
                    },
                    full: {
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric',
                        timeZoneName: 'short'
                    }
                }
            };
            return IntlMessageFormat;
        }();
        exports.IntlMessageFormat = IntlMessageFormat;
        exports.default = IntlMessageFormat;
    }
});

"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-messageformat@6.1.11/dist/index", ['module', 'exports', 'require', './core', './formatters'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
        Object.defineProperty(exports, "__esModule", { value: true });
        var core_1 = require("./core");
        __export(require("./formatters"));
        __export(require("./core"));
        exports.default = core_1.default;
    }
});

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

Liferay.Loader.define('career-ui-job-advertisement-public-overview$invariant@2.2.4/invariant', ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    var NODE_ENV = undefined;

    var invariant = function (condition, format, a, b, c, d, e, f) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }


      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    };

    module.exports = invariant;
  }
});

"use strict";
/*
HTML escaping is the same as React's
(on purpose.) Therefore, it has the following Copyright and Licensing:

Copyright 2013-2014, Facebook, Inc.
All rights reserved.

This source code is licensed under the BSD-style license found in the LICENSE
file in the root directory of React's source tree.
*/

Liferay.Loader.define("career-ui-job-advertisement-public-overview$react-intl@3.1.6/dist/utils", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$react', 'career-ui-job-advertisement-public-overview$intl-messageformat', 'career-ui-job-advertisement-public-overview$intl-format-cache', 'career-ui-job-advertisement-public-overview$invariant'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        Object.defineProperty(exports, "__esModule", { value: true });
        var React = require("career-ui-job-advertisement-public-overview$react");
        var intl_messageformat_1 = require("career-ui-job-advertisement-public-overview$intl-messageformat");
        var intl_format_cache_1 = require("career-ui-job-advertisement-public-overview$intl-format-cache");
        var invariant = require("career-ui-job-advertisement-public-overview$invariant");
        var ESCAPED_CHARS = {
            38: '&amp;',
            62: '&gt;',
            60: '&lt;',
            34: '&quot;',
            39: '&#x27;'
        };
        var UNSAFE_CHARS_REGEX = /[&><"']/g;
        function escape(str) {
            return ('' + str).replace(UNSAFE_CHARS_REGEX, function (match) {
                return ESCAPED_CHARS[match.charCodeAt(0)];
            });
        }
        exports.escape = escape;
        function filterProps(props, whitelist, defaults) {
            if (defaults === void 0) {
                defaults = {};
            }
            return whitelist.reduce(function (filtered, name) {
                if (props.hasOwnProperty(name)) {
                    filtered[name] = props[name];
                } else if (defaults.hasOwnProperty(name)) {
                    filtered[name] = defaults[name];
                }
                return filtered;
            }, {});
        }
        exports.filterProps = filterProps;
        function invariantIntlContext(intl) {
            invariant(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');
        }
        exports.invariantIntlContext = invariantIntlContext;
        function createError(message, exception) {
            var eMsg = exception ? "\n" + exception.stack : '';
            return "[React Intl] " + message + eMsg;
        }
        exports.createError = createError;
        function defaultErrorHandler(error) {
            console.error(error);
        }
        exports.defaultErrorHandler = defaultErrorHandler;
        exports.DEFAULT_INTL_CONFIG = {
            formats: {},
            messages: {},
            timeZone: undefined,
            textComponent: React.Fragment,
            defaultLocale: 'en',
            defaultFormats: {},
            onError: defaultErrorHandler
        };
        function createIntlCache() {
            return {
                dateTime: {},
                number: {},
                message: {},
                relativeTime: {},
                pluralRules: {}
            };
        }
        exports.createIntlCache = createIntlCache;
        /**
         * Create intl formatters and populate cache
         * @param cache explicit cache to prevent leaking memory
         */
        function createFormatters(cache) {
            if (cache === void 0) {
                cache = createIntlCache();
            }
            return {
                getDateTimeFormat: intl_format_cache_1.default(Intl.DateTimeFormat, cache.dateTime),
                getNumberFormat: intl_format_cache_1.default(Intl.NumberFormat, cache.number),
                getMessageFormat: intl_format_cache_1.default(intl_messageformat_1.default, cache.message),
                getRelativeTimeFormat: intl_format_cache_1.default(Intl.RelativeTimeFormat, cache.relativeTime),
                getPluralRules: intl_format_cache_1.default(Intl.PluralRules, cache.pluralRules)
            };
        }
        exports.createFormatters = createFormatters;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$react-intl@3.1.6/dist/components/injectIntl", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$react', 'career-ui-job-advertisement-public-overview$hoist-non-react-statics', '../utils'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        var React = require("career-ui-job-advertisement-public-overview$react");
        // Since rollup cannot deal with namespace being a function,
        // this is to interop with TypeScript since `invariant`
        // does not export a default
        // https://github.com/rollup/rollup/issues/1267
        var hoistNonReactStatics = require("career-ui-job-advertisement-public-overview$hoist-non-react-statics");
        var utils_1 = require("../utils");
        function getDisplayName(Component) {
            return Component.displayName || Component.name || 'Component';
        }
        // TODO: We should provide initial value here
        var IntlContext = React.createContext(null);
        var IntlConsumer = IntlContext.Consumer,
            IntlProvider = IntlContext.Provider;
        exports.Provider = IntlProvider;
        exports.Context = IntlContext;
        function injectIntl(WrappedComponent, options) {
            var _a = options || {},
                _b = _a.intlPropName,
                intlPropName = _b === void 0 ? 'intl' : _b,
                _c = _a.forwardRef,
                forwardRef = _c === void 0 ? false : _c,
                _d = _a.enforceContext,
                enforceContext = _d === void 0 ? true : _d;
            var WithIntl = function (props) {
                return React.createElement(IntlConsumer, null, function (intl) {
                    var _a;
                    if (enforceContext) {
                        utils_1.invariantIntlContext(intl);
                    }
                    return React.createElement(WrappedComponent, __assign({}, props, (_a = {}, _a[intlPropName] = intl, _a), { ref: forwardRef ? props.forwardedRef : null }));
                });
            };
            WithIntl.displayName = "injectIntl(" + getDisplayName(WrappedComponent) + ")";
            WithIntl.WrappedComponent = WrappedComponent;
            if (forwardRef) {
                return hoistNonReactStatics(React.forwardRef(function (props, ref) {
                    return React.createElement(WithIntl, __assign({}, props, { forwardedRef: ref }));
                }), WrappedComponent);
            }
            return hoistNonReactStatics(WithIntl, WrappedComponent);
        }
        exports.default = injectIntl;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$react-intl@3.1.6/dist/components/createFormattedComponent", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$react', './injectIntl'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        Object.defineProperty(exports, "__esModule", { value: true });
        var React = require("career-ui-job-advertisement-public-overview$react");
        var injectIntl_1 = require("./injectIntl");
        function createFormattedComponent(type) {
            var Component = function (props) {
                var value = props.value,
                    children = props.children,
                    _a = props.intl,
                    formatFn = _a[type],
                    Text = _a.textComponent;
                var formattedValue = formatFn(value, props);
                if (typeof children === 'function') {
                    return children(formattedValue);
                }
                if (Text) {
                    return React.createElement(Text, null, formattedValue);
                }
                // Work around @types/react where React.FC cannot return string
                return formattedValue;
            };
            Component.displayName = type === 'formatDate' ? 'FormattedDate' : type === 'formatTime' ? 'FormattedTime' : 'FormattedNumber';
            return {
                Component: injectIntl_1.default(Component)
            };
        }
        exports.default = createFormattedComponent;
    }
});

"use strict";

Liferay.Loader.define("career-ui-job-advertisement-public-overview$react-intl@3.1.6/dist/components/useIntl", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$react', './injectIntl', '../utils'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        Object.defineProperty(exports, "__esModule", { value: true });
        var react_1 = require("career-ui-job-advertisement-public-overview$react");
        var injectIntl_1 = require("./injectIntl");
        var utils_1 = require("../utils");
        function useIntl() {
            var intl = react_1.useContext(injectIntl_1.Context);
            utils_1.invariantIntlContext(intl);
            return intl;
        }
        exports.default = useIntl;
    }
});

"use strict";
/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

Liferay.Loader.define("career-ui-job-advertisement-public-overview$react-intl@3.1.6/dist/format", ['module', 'exports', 'require', 'career-ui-job-advertisement-public-overview$invariant', './utils', 'career-ui-job-advertisement-public-overview$intl-messageformat-parser'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        var invariant = require("career-ui-job-advertisement-public-overview$invariant");
        var utils_1 = require("./utils");
        var intl_messageformat_parser_1 = require("career-ui-job-advertisement-public-overview$intl-messageformat-parser");
        var DATE_TIME_FORMAT_OPTIONS = ['localeMatcher', 'formatMatcher', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'];
        var NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits'];
        var RELATIVE_FORMAT_OPTIONS = ['numeric', 'style'];
        var PLURAL_FORMAT_OPTIONS = ['localeMatcher', 'type'];
        function getNamedFormat(formats, type, name, onError) {
            var formatType = formats && formats[type];
            var format;
            if (formatType) {
                format = formatType[name];
            }
            if (format) {
                return format;
            }
            onError(utils_1.createError("No " + type + " format named: " + name));
        }
        /**
         * Escape a raw msg when we run in prod mode
         * https://github.com/formatjs/formatjs/blob/master/packages/intl-messageformat-parser/src/parser.pegjs#L155
         */
        function escapeUnformattedMessage(msg) {
            return msg.replace(/'\{(.*?)\}'/g, "{$1}");
        }
        function formatDate(_a, state) {
            var locale = _a.locale,
                formats = _a.formats,
                onError = _a.onError,
                timeZone = _a.timeZone;
            var _b = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                _b[_i - 2] = arguments[_i];
            }
            var value = _b[0],
                _c = _b[1],
                options = _c === void 0 ? {} : _c;
            var format = options.format;
            var defaults = __assign({}, timeZone && { timeZone: timeZone }, format && getNamedFormat(formats, 'date', format, onError));
            var filteredOptions = utils_1.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);
            var date = typeof value === 'string' ? new Date(value || 0) : value;
            try {
                return state.getDateTimeFormat(locale, filteredOptions).format(date);
            } catch (e) {
                onError(utils_1.createError('Error formatting date.', e));
            }
            return String(date);
        }
        exports.formatDate = formatDate;
        function formatTime(_a, state) {
            var locale = _a.locale,
                formats = _a.formats,
                onError = _a.onError,
                timeZone = _a.timeZone;
            var _b = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                _b[_i - 2] = arguments[_i];
            }
            var value = _b[0],
                _c = _b[1],
                options = _c === void 0 ? {} : _c;
            var format = options.format;
            var defaults = __assign({}, timeZone && { timeZone: timeZone }, format && getNamedFormat(formats, 'time', format, onError));
            var filteredOptions = utils_1.filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);
            if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {
                // Add default formatting options if hour, minute, or second isn't defined.
                filteredOptions = __assign({}, filteredOptions, { hour: 'numeric', minute: 'numeric' });
            }
            var date = typeof value === 'string' ? new Date(value || 0) : value;
            try {
                return state.getDateTimeFormat(locale, filteredOptions).format(date);
            } catch (e) {
                onError(utils_1.createError('Error formatting time.', e));
            }
            return String(date);
        }
        exports.formatTime = formatTime;
        function formatRelativeTime(_a, state) {
            var locale = _a.locale,
                formats = _a.formats,
                onError = _a.onError;
            var _b = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                _b[_i - 2] = arguments[_i];
            }
            var value = _b[0],
                _c = _b[1],
                unit = _c === void 0 ? 'second' : _c,
                _d = _b[2],
                options = _d === void 0 ? {} : _d;
            var format = options.format;
            var defaults = !!format && getNamedFormat(formats, 'relative', format, onError) || {};
            var filteredOptions = utils_1.filterProps(options, RELATIVE_FORMAT_OPTIONS, defaults);
            try {
                return state.getRelativeTimeFormat(locale, filteredOptions).format(value, unit);
            } catch (e) {
                onError(utils_1.createError('Error formatting relative time.', e));
            }
            return String(value);
        }
        exports.formatRelativeTime = formatRelativeTime;
        function formatNumber(_a, state) {
            var locale = _a.locale,
                formats = _a.formats,
                onError = _a.onError;
            var _b = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                _b[_i - 2] = arguments[_i];
            }
            var value = _b[0],
                _c = _b[1],
                options = _c === void 0 ? {} : _c;
            var format = options.format;
            var defaults = format && getNamedFormat(formats, 'number', format, onError) || {};
            var filteredOptions = utils_1.filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);
            try {
                return state.getNumberFormat(locale, filteredOptions).format(value);
            } catch (e) {
                onError(utils_1.createError('Error formatting number.', e));
            }
            return String(value);
        }
        exports.formatNumber = formatNumber;
        function formatPlural(_a, state) {
            var locale = _a.locale,
                onError = _a.onError;
            var _b = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                _b[_i - 2] = arguments[_i];
            }
            var value = _b[0],
                _c = _b[1],
                options = _c === void 0 ? {} : _c;
            var filteredOptions = utils_1.filterProps(options, PLURAL_FORMAT_OPTIONS);
            try {
                return state.getPluralRules(locale, filteredOptions).select(value);
            } catch (e) {
                onError(utils_1.createError('Error formatting plural.', e));
            }
            return 'other';
        }
        exports.formatPlural = formatPlural;
        function formatMessage(_a, state, messageDescriptor, values) {
            var locale = _a.locale,
                formats = _a.formats,
                messages = _a.messages,
                defaultLocale = _a.defaultLocale,
                defaultFormats = _a.defaultFormats,
                onError = _a.onError;
            if (messageDescriptor === void 0) {
                messageDescriptor = { id: '' };
            }
            if (values === void 0) {
                values = {};
            }
            var id = messageDescriptor.id,
                defaultMessage = messageDescriptor.defaultMessage;
            // `id` is a required field of a Message Descriptor.
            invariant(id, '[React Intl] An `id` must be provided to format a message.');
            var message = messages && messages[id];
            Object.keys(values).length > 0;

            var formattedMessageParts = [];
            if (message) {
                try {
                    var formatter = state.getMessageFormat(message, locale, formats, {
                        formatters: state
                    });
                    formattedMessageParts = formatter.formatXMLMessage(values);
                } catch (e) {
                    onError(utils_1.createError("Error formatting message: \"" + id + "\" for locale: \"" + locale + "\"" + (defaultMessage ? ', using default message as fallback.' : ''), e));
                }
            } else {
                // This prevents warnings from littering the console in development
                // when no `messages` are passed into the <IntlProvider> for the
                // default locale, and a default message is in the source.
                if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
                    onError(utils_1.createError("Missing message: \"" + id + "\" for locale: \"" + locale + "\"" + (defaultMessage ? ', using default message as fallback.' : '')));
                }
            }
            if (!formattedMessageParts.length && defaultMessage) {
                try {
                    var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);
                    formattedMessageParts = formatter.formatXMLMessage(values);
                } catch (e) {
                    onError(utils_1.createError("Error formatting the default message for: \"" + id + "\"", e));
                }
            }
            if (!formattedMessageParts.length) {
                onError(utils_1.createError("Cannot format message: \"" + id + "\", " + ("using message " + (message || defaultMessage ? 'source' : 'id') + " as fallback.")));
                if (typeof message === 'string') {
                    return message || defaultMessage || id;
                }
                return defaultMessage || id;
            }
            if (formattedMessageParts.length === 1 && typeof formattedMessageParts[0] === 'string') {
                return formattedMessageParts[0] || defaultMessage || id;
            }
            return formattedMessageParts;
        }
        exports.formatMessage = formatMessage;
        function formatHTMLMessage(config, state, messageDescriptor, rawValues) {
            if (messageDescriptor === void 0) {
                messageDescriptor = { id: '' };
            }
            if (rawValues === void 0) {
                rawValues = {};
            }
            // Process all the values before they are used when formatting the ICU
            // Message string. Since the formatted message might be injected via
            // `innerHTML`, all String-based values need to be HTML-escaped.
            var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {
                var value = rawValues[name];
                escaped[name] = typeof value === 'string' ? utils_1.escape(value) : value;
                return escaped;
            }, {});
            return formatMessage(config, state, messageDescriptor, escapedValues);
        }
        exports.formatHTMLMessage = formatHTMLMessage;
        exports.formatters = {
            formatNumber: formatNumber,
            formatDate: formatDate,
            formatTime: formatTime,
            formatMessage: formatMessage,
            formatPlural: formatPlural,
            formatHTMLMessage: formatHTMLMessage,
            formatRelativeTime: formatRelativeTime
        };
    }
});

"use strict";
/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

Liferay.Loader.define("career-ui-job-advertisement-public-overview$intl-locales-supported@1.8.12/dist/index", ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        Object.defineProperty(exports, "__esModule", { value: true });
        function areIntlLocalesSupported(locales, constructorsToCheck) {
            if (typeof Intl === 'undefined') {
                return false;
            }
            if (!locales) {
                throw new Error('locales must be supplied.');
            }
            if (!Array.isArray(locales)) {
                locales = [locales];
            }
            var intlConstructors = constructorsToCheck || [Intl.DateTimeFormat, Intl.NumberFormat, Intl.PluralRules];
            intlConstructors = intlConstructors.filter(Boolean);
            if (intlConstructors.length === 0 || constructorsToCheck && intlConstructors.length !== constructorsToCheck.length) {
                return false;
            }
            return intlConstructors.every(function (intlConstructor) {
                return intlConstructor.supportedLocalesOf(locales).length === locales.length;
            });
        }
        exports.default = areIntlLocalesSupported;
        //# sourceMappingURL=index.js.map
    }
});

'use strict';

Liferay.Loader.define('career-ui-job-advertisement-public-overview$shallow-equal@1.2.1/objects/index', ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    function shallowEqualObjects(objA, objB) {
      if (objA === objB) {
        return true;
      }

      if (!objA || !objB) {
        return false;
      }

      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;

      if (bKeys.length !== len) {
        return false;
      }

      for (var i = 0; i < len; i++) {
        var key = aKeys[i];

        if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
          return false;
        }
      }

      return true;
    }

    module.exports = shallowEqualObjects;
  }
});

